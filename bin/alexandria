#!/usr/bin/env ruby
# coding: UTF-8

require_relative '../lib/alexandria'
require 'clive'
require 'pp'

LIB = Alexandria::Library.new File.expand_path(ENV["ALEXANDRIA_LIBRARY"])

KINDLE = Alexandria::Kindle.find

class Alexandria::CLI < Clive

  module Helpers
    def check(bool)
      bool ? "✓" : "✗"
    end
  end

  command :add, arg: '<book>' do
    action do
      LIB.add! Alexandria::Book.create(File.expand_path(book))
    end
  end

  command :list do
    opt :author, args: '<name>'
    opt :title, args: '<name>'

    bool :by_author
    bool :v, :verbose

    action do
      criteria = {}
      criteria[:title] = get(:title) if has?(:title)
      criteria[:author] = get(:author) if has?(:author)

      books = LIB.find_all(criteria)

      if get(:by_author)
        books.group_by {|book| book.author }.each do |author, books|
          puts author.bold

          books.each do |book|
            puts "  #{book.title}"

            if get(:verbose)
              puts "  #{book.path}\n".grey
            end
          end
        end

      else
        books.sort_by(&:title).each do |book|
          puts "#{book.title.bold} by #{book.author}"

          if get(:verbose)
            puts "  #{book.path}\n".grey
          end
        end
      end
    end
  end

  command :sync do
    bool :dry_run

    action do
      return unless KINDLE

      KINDLE.books.each do |book|
        dest_dir = File.join(LIB.path, book.author, book.title)

        unless LIB.include?(book) || File.exist?(dest_dir)
          if get(:dry_run)
            puts "Missing: #{book.title} by #{book.author}"
          else
            LIB.add! book
          end
        end
      end
    end
  end

end

Clive::Option::Runner.extend Alexandria::CLI::Helpers
a = Alexandria::CLI.run
